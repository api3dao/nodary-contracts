{
  "language": "Solidity",
  "sources": {
    "@api3/airnode-protocol-v1/contracts/access-control-registry/AccessControlRegistryAdminned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/SelfMulticall.sol\";\nimport \"./RoleDeriver.sol\";\nimport \"./interfaces/IAccessControlRegistryAdminned.sol\";\nimport \"./interfaces/IAccessControlRegistry.sol\";\n\n/// @title Contract to be inherited by contracts whose adminship functionality\n/// will be implemented using AccessControlRegistry\ncontract AccessControlRegistryAdminned is\n    SelfMulticall,\n    RoleDeriver,\n    IAccessControlRegistryAdminned\n{\n    /// @notice AccessControlRegistry contract address\n    address public immutable override accessControlRegistry;\n\n    /// @notice Admin role description\n    string public override adminRoleDescription;\n\n    bytes32 internal immutable adminRoleDescriptionHash;\n\n    /// @dev Contracts deployed with the same admin role descriptions will have\n    /// the same roles, meaning that granting an account a role will authorize\n    /// it in multiple contracts. Unless you want your deployed contract to\n    /// share the role configuration of another contract, use a unique admin\n    /// role description.\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription\n    ) {\n        require(_accessControlRegistry != address(0), \"ACR address zero\");\n        require(\n            bytes(_adminRoleDescription).length > 0,\n            \"Admin role description empty\"\n        );\n        accessControlRegistry = _accessControlRegistry;\n        adminRoleDescription = _adminRoleDescription;\n        adminRoleDescriptionHash = keccak256(\n            abi.encodePacked(_adminRoleDescription)\n        );\n    }\n\n    /// @notice Derives the admin role for the specific manager address\n    /// @param manager Manager address\n    /// @return adminRole Admin role\n    function _deriveAdminRole(\n        address manager\n    ) internal view returns (bytes32 adminRole) {\n        adminRole = _deriveRole(\n            _deriveRootRole(manager),\n            adminRoleDescriptionHash\n        );\n    }\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/access-control-registry/AccessControlRegistryAdminnedWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AccessControlRegistryAdminned.sol\";\nimport \"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\n\n/// @title Contract to be inherited by contracts with manager whose adminship\n/// functionality will be implemented using AccessControlRegistry\n/// @notice The manager address here is expected to belong to an\n/// AccessControlRegistry user that is a multisig/DAO\ncontract AccessControlRegistryAdminnedWithManager is\n    AccessControlRegistryAdminned,\n    IAccessControlRegistryAdminnedWithManager\n{\n    /// @notice Address of the manager that manages the related\n    /// AccessControlRegistry roles\n    /// @dev The mutability of the manager role can be implemented by\n    /// designating an OwnableCallForwarder contract as the manager. The\n    /// ownership of this contract can then be transferred, effectively\n    /// transferring managership.\n    address public immutable override manager;\n\n    /// @notice Admin role\n    /// @dev Since `manager` is immutable, so is `adminRole`\n    bytes32 public immutable override adminRole;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    )\n        AccessControlRegistryAdminned(\n            _accessControlRegistry,\n            _adminRoleDescription\n        )\n    {\n        require(_manager != address(0), \"Manager address zero\");\n        manager = _manager;\n        adminRole = _deriveAdminRole(_manager);\n    }\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"../../utils/interfaces/IExpiringMetaTxForwarder.sol\";\nimport \"../../utils/interfaces/ISelfMulticall.sol\";\n\ninterface IAccessControlRegistry is\n    IAccessControl,\n    IExpiringMetaTxForwarder,\n    ISelfMulticall\n{\n    event InitializedManager(\n        bytes32 indexed rootRole,\n        address indexed manager,\n        address sender\n    );\n\n    event InitializedRole(\n        bytes32 indexed role,\n        bytes32 indexed adminRole,\n        string description,\n        address sender\n    );\n\n    function initializeManager(address manager) external;\n\n    function initializeRoleAndGrantToSender(\n        bytes32 adminRole,\n        string calldata description\n    ) external returns (bytes32 role);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../utils/interfaces/ISelfMulticall.sol\";\n\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\n    function accessControlRegistry() external view returns (address);\n\n    function adminRoleDescription() external view returns (string memory);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlRegistryAdminned.sol\";\n\ninterface IAccessControlRegistryAdminnedWithManager is\n    IAccessControlRegistryAdminned\n{\n    function manager() external view returns (address);\n\n    function adminRole() external view returns (bytes32);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/access-control-registry/RoleDeriver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contract to be inherited by contracts that will derive\n/// AccessControlRegistry roles\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\n/// derive roles, it should inherit this contract instead of re-implementing\n/// the logic\ncontract RoleDeriver {\n    /// @notice Derives the root role of the manager\n    /// @param manager Manager address\n    /// @return rootRole Root role\n    function _deriveRootRole(\n        address manager\n    ) internal pure returns (bytes32 rootRole) {\n        rootRole = keccak256(abi.encodePacked(manager));\n    }\n\n    /// @notice Derives the role using its admin role and description\n    /// @dev This implies that roles adminned by the same role cannot have the\n    /// same description\n    /// @param adminRole Admin role\n    /// @param description Human-readable description of the role\n    /// @return role Role\n    function _deriveRole(\n        bytes32 adminRole,\n        string memory description\n    ) internal pure returns (bytes32 role) {\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\n    }\n\n    /// @notice Derives the role using its admin role and description hash\n    /// @dev This implies that roles adminned by the same role cannot have the\n    /// same description\n    /// @param adminRole Admin role\n    /// @param descriptionHash Hash of the human-readable description of the\n    /// role\n    /// @return role Role\n    function _deriveRole(\n        bytes32 adminRole,\n        bytes32 descriptionHash\n    ) internal pure returns (bytes32 role) {\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\n    }\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/interfaces/IExpiringMetaTxForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExpiringMetaTxForwarder {\n    event ExecutedMetaTx(bytes32 indexed metaTxHash);\n\n    event CanceledMetaTx(bytes32 indexed metaTxHash);\n\n    struct ExpiringMetaTx {\n        address from;\n        address to;\n        bytes data;\n        uint256 expirationTimestamp;\n    }\n\n    function execute(\n        ExpiringMetaTx calldata metaTx,\n        bytes calldata signature\n    ) external returns (bytes memory returndata);\n\n    function cancel(ExpiringMetaTx calldata metaTx) external;\n\n    function metaTxWithHashIsExecutedOrCanceled(\n        bytes32 metaTxHash\n    ) external returns (bool);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/interfaces/IPrepaymentDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\n\ninterface IPrepaymentDepository is IAccessControlRegistryAdminnedWithManager {\n    event SetWithdrawalDestination(\n        address indexed user,\n        address withdrawalDestination\n    );\n\n    event IncreasedUserWithdrawalLimit(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event DecreasedUserWithdrawalLimit(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event Claimed(address recipient, uint256 amount, address sender);\n\n    event Deposited(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event Withdrew(\n        address indexed user,\n        bytes32 indexed withdrawalHash,\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        address withdrawalDestination,\n        uint256 withdrawalLimit\n    );\n\n    function setWithdrawalDestination(\n        address user,\n        address withdrawalDestination\n    ) external;\n\n    function increaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function decreaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function claim(address recipient, uint256 amount) external;\n\n    function deposit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function applyPermitAndDeposit(\n        address user,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 withdrawalLimit);\n\n    function withdraw(\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        bytes calldata signature\n    ) external returns (address withdrawalDestination, uint256 withdrawalLimit);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WITHDRAWAL_SIGNER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CLAIMER_ROLE_DESCRIPTION() external view returns (string memory);\n\n    function withdrawalSignerRole() external view returns (bytes32);\n\n    function userWithdrawalLimitIncreaserRole() external view returns (bytes32);\n\n    function userWithdrawalLimitDecreaserRole() external view returns (bytes32);\n\n    function claimerRole() external view returns (bytes32);\n\n    function token() external view returns (address);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/interfaces/ISelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISelfMulticall {\n    function multicall(\n        bytes[] calldata data\n    ) external returns (bytes[] memory returndata);\n\n    function tryMulticall(\n        bytes[] calldata data\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/PrepaymentDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\";\nimport \"./interfaces/IPrepaymentDepository.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n/// @title Contract that enables micropayments to be prepaid in batch\n/// @notice `manager` represents the payment recipient, and its various\n/// privileges can be delegated to other accounts through respective roles.\n/// `manager`, `userWithdrawalLimitIncreaser` and `claimer` roles should only\n/// be granted to a multisig or an equivalently decentralized account.\n/// `withdrawalSigner` issues ERC191 signatures, and thus has to be an EOA. It\n/// being compromised poses a risk in proportion to the redundancy in user\n/// withdrawal limits. Have a `userWithdrawalLimitDecreaser` decrease user\n/// withdrawal limits as necessary to mitigate this risk.\n/// The `userWithdrawalLimitDecreaser` role can be granted to an EOA, as it\n/// cannot cause irreversible harm.\n/// This contract accepts prepayments in an ERC20 token specified immutably\n/// during construction. Do not use tokens that are not fully ERC20-compliant.\n/// An optional `depositWithPermit()` function is added to provide ERC2612\n/// support.\ncontract PrepaymentDepository is\n    AccessControlRegistryAdminnedWithManager,\n    IPrepaymentDepository\n{\n    using ECDSA for bytes32;\n\n    /// @notice Withdrawal signer role description\n    string public constant override WITHDRAWAL_SIGNER_ROLE_DESCRIPTION =\n        \"Withdrawal signer\";\n    /// @notice User withdrawal limit increaser role description\n    string\n        public constant\n        override USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION =\n        \"User withdrawal limit increaser\";\n    /// @notice User withdrawal limit decreaser role description\n    string\n        public constant\n        override USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION =\n        \"User withdrawal limit decreaser\";\n    /// @notice Claimer role description\n    string public constant override CLAIMER_ROLE_DESCRIPTION = \"Claimer\";\n\n    // We prefer revert strings over custom errors because not all chains and\n    // block explorers support custom errors\n    string private constant AMOUNT_ZERO_REVERT_STRING = \"Amount zero\";\n    string private constant AMOUNT_EXCEEDS_LIMIT_REVERT_STRING =\n        \"Amount exceeds limit\";\n    string private constant TRANSFER_UNSUCCESSFUL_REVERT_STRING =\n        \"Transfer unsuccessful\";\n\n    /// @notice Withdrawal signer role\n    bytes32 public immutable override withdrawalSignerRole;\n    /// @notice User withdrawal limit increaser role\n    bytes32 public immutable override userWithdrawalLimitIncreaserRole;\n    /// @notice User withdrawal limit decreaser role\n    bytes32 public immutable override userWithdrawalLimitDecreaserRole;\n    /// @notice Claimer role\n    bytes32 public immutable override claimerRole;\n\n    /// @notice Contract address of the ERC20 token that prepayments can be\n    /// made in\n    address public immutable override token;\n\n    /// @notice Returns the withdrawal destination of the user\n    mapping(address => address) public userToWithdrawalDestination;\n\n    /// @notice Returns the withdrawal limit of the user\n    mapping(address => uint256) public userToWithdrawalLimit;\n\n    /// @notice Returns if the withdrawal with the hash is executed\n    mapping(bytes32 => bool) public withdrawalWithHashIsExecuted;\n\n    /// @param user User address\n    /// @param amount Amount\n    /// @dev Reverts if user address or amount is zero\n    modifier onlyNonZeroUserAddressAndAmount(address user, uint256 amount) {\n        require(user != address(0), \"User address zero\");\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        _;\n    }\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    /// @param _token Contract address of the ERC20 token that prepayments are\n    /// made in\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager,\n        address _token\n    )\n        AccessControlRegistryAdminnedWithManager(\n            _accessControlRegistry,\n            _adminRoleDescription,\n            _manager\n        )\n    {\n        require(_token != address(0), \"Token address zero\");\n        token = _token;\n        withdrawalSignerRole = _deriveRole(\n            _deriveAdminRole(manager),\n            WITHDRAWAL_SIGNER_ROLE_DESCRIPTION\n        );\n        userWithdrawalLimitIncreaserRole = _deriveRole(\n            _deriveAdminRole(manager),\n            USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION\n        );\n        userWithdrawalLimitDecreaserRole = _deriveRole(\n            _deriveAdminRole(manager),\n            USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION\n        );\n        claimerRole = _deriveRole(\n            _deriveAdminRole(manager),\n            CLAIMER_ROLE_DESCRIPTION\n        );\n    }\n\n    /// @notice Called by the user that has not set a withdrawal destination to\n    /// set a withdrawal destination, or called by the withdrawal destination\n    /// of a user to set a new withdrawal destination\n    /// @param user User address\n    /// @param withdrawalDestination Withdrawal destination\n    function setWithdrawalDestination(\n        address user,\n        address withdrawalDestination\n    ) external override {\n        require(user != withdrawalDestination, \"Same user and destination\");\n        require(\n            (msg.sender == user &&\n                userToWithdrawalDestination[user] == address(0)) ||\n                (msg.sender == userToWithdrawalDestination[user]),\n            \"Sender not destination\"\n        );\n        userToWithdrawalDestination[user] = withdrawalDestination;\n        emit SetWithdrawalDestination(user, withdrawalDestination);\n    }\n\n    /// @notice Called to increase the withdrawal limit of the user\n    /// @dev This function is intended to be used to revert faulty\n    /// `decreaseUserWithdrawalLimit()` calls\n    /// @param user User address\n    /// @param amount Amount to increase the withdrawal limit by\n    /// @return withdrawalLimit Increased withdrawal limit\n    function increaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    )\n        external\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    userWithdrawalLimitIncreaserRole,\n                    msg.sender\n                ),\n            \"Cannot increase withdrawal limit\"\n        );\n        withdrawalLimit = userToWithdrawalLimit[user] + amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit IncreasedUserWithdrawalLimit(\n            user,\n            amount,\n            withdrawalLimit,\n            msg.sender\n        );\n    }\n\n    /// @notice Called to decrease the withdrawal limit of the user\n    /// @param user User address\n    /// @param amount Amount to decrease the withdrawal limit by\n    /// @return withdrawalLimit Decreased withdrawal limit\n    function decreaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    )\n        external\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    userWithdrawalLimitDecreaserRole,\n                    msg.sender\n                ),\n            \"Cannot decrease withdrawal limit\"\n        );\n        uint256 oldWithdrawalLimit = userToWithdrawalLimit[user];\n        require(\n            amount <= oldWithdrawalLimit,\n            AMOUNT_EXCEEDS_LIMIT_REVERT_STRING\n        );\n        withdrawalLimit = oldWithdrawalLimit - amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit DecreasedUserWithdrawalLimit(\n            user,\n            amount,\n            withdrawalLimit,\n            msg.sender\n        );\n    }\n\n    /// @notice Called to claim tokens\n    /// @param recipient Recipient address\n    /// @param amount Amount of tokens to claim\n    function claim(address recipient, uint256 amount) external override {\n        require(recipient != address(0), \"Recipient address zero\");\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    claimerRole,\n                    msg.sender\n                ),\n            \"Cannot claim\"\n        );\n        emit Claimed(recipient, amount, msg.sender);\n        require(\n            IERC20(token).transfer(recipient, amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n\n    /// @notice Called to deposit tokens on behalf of a user\n    /// @param user User address\n    /// @param amount Amount of tokens to deposit\n    /// @return withdrawalLimit Increased withdrawal limit\n    function deposit(\n        address user,\n        uint256 amount\n    )\n        public\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        withdrawalLimit = userToWithdrawalLimit[user] + amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit Deposited(user, amount, withdrawalLimit, msg.sender);\n        require(\n            IERC20(token).transferFrom(msg.sender, address(this), amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n\n    /// @notice Called to apply a ERC2612 permit and deposit tokens on behalf\n    /// of a user\n    /// @param user User address\n    /// @param amount Amount of tokens to deposit\n    /// @param deadline Deadline of the permit\n    /// @param v v component of the signature\n    /// @param r r component of the signature\n    /// @param s s component of the signature\n    /// @return withdrawalLimit Increased withdrawal limit\n    function applyPermitAndDeposit(\n        address user,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override returns (uint256 withdrawalLimit) {\n        IERC20Permit(token).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            v,\n            r,\n            s\n        );\n        withdrawalLimit = deposit(user, amount);\n    }\n\n    /// @notice Called by a user to withdraw tokens\n    /// @param amount Amount of tokens to withdraw\n    /// @param expirationTimestamp Expiration timestamp of the signature\n    /// @param withdrawalSigner Address of the account that signed the\n    /// withdrawal\n    /// @param signature Withdrawal signature\n    /// @return withdrawalDestination Withdrawal destination\n    /// @return withdrawalLimit Decreased withdrawal limit\n    function withdraw(\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        bytes calldata signature\n    )\n        external\n        override\n        returns (address withdrawalDestination, uint256 withdrawalLimit)\n    {\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        require(block.timestamp < expirationTimestamp, \"Signature expired\");\n        bytes32 withdrawalHash = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                msg.sender,\n                amount,\n                expirationTimestamp\n            )\n        );\n        require(\n            !withdrawalWithHashIsExecuted[withdrawalHash],\n            \"Withdrawal already executed\"\n        );\n        require(\n            withdrawalSigner == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    withdrawalSignerRole,\n                    withdrawalSigner\n                ),\n            \"Cannot sign withdrawal\"\n        );\n        require(\n            (withdrawalHash.toEthSignedMessageHash()).recover(signature) ==\n                withdrawalSigner,\n            \"Signature mismatch\"\n        );\n        withdrawalWithHashIsExecuted[withdrawalHash] = true;\n        uint256 oldWithdrawalLimit = userToWithdrawalLimit[msg.sender];\n        require(\n            amount <= oldWithdrawalLimit,\n            AMOUNT_EXCEEDS_LIMIT_REVERT_STRING\n        );\n        withdrawalLimit = oldWithdrawalLimit - amount;\n        userToWithdrawalLimit[msg.sender] = withdrawalLimit;\n        if (userToWithdrawalDestination[msg.sender] == address(0)) {\n            withdrawalDestination = msg.sender;\n        } else {\n            withdrawalDestination = userToWithdrawalDestination[msg.sender];\n        }\n        emit Withdrew(\n            msg.sender,\n            withdrawalHash,\n            amount,\n            expirationTimestamp,\n            withdrawalSigner,\n            withdrawalDestination,\n            withdrawalLimit\n        );\n        require(\n            IERC20(token).transfer(withdrawalDestination, amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n}\n"
    },
    "@api3/airnode-protocol-v1/contracts/utils/SelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/ISelfMulticall.sol\";\n\n/// @title Contract that enables calls to the inheriting contract to be batched\n/// @notice Implements two ways of batching, one requires none of the calls to\n/// revert and the other tolerates individual calls reverting\n/// @dev This implementation uses delegatecall for individual function calls.\n/// Since delegatecall is a message call, it can only be made to functions that\n/// are externally visible. This means that a contract cannot multicall its own\n/// functions that use internal/private visibility modifiers.\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\ncontract SelfMulticall is ISelfMulticall {\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\n    /// one of the batched calls reverts\n    /// @param data Array of calldata of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function multicall(\n        bytes[] calldata data\n    ) external override returns (bytes[] memory returndata) {\n        uint256 callCount = data.length;\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            bool success;\n            // solhint-disable-next-line avoid-low-level-calls\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\n            if (!success) {\n                bytes memory returndataWithRevertData = returndata[ind];\n                if (returndataWithRevertData.length > 0) {\n                    // Adapted from OpenZeppelin's Address.sol\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        let returndata_size := mload(returndataWithRevertData)\n                        revert(\n                            add(32, returndataWithRevertData),\n                            returndata_size\n                        )\n                    }\n                } else {\n                    revert(\"Multicall: No revert string\");\n                }\n            }\n            unchecked {\n                ind++;\n            }\n        }\n    }\n\n    /// @notice Batches calls to the inheriting contract but does not revert if\n    /// any of the batched calls reverts\n    /// @param data Array of calldata of batched calls\n    /// @return successes Array of success conditions of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function tryMulticall(\n        bytes[] calldata data\n    )\n        external\n        override\n        returns (bool[] memory successes, bytes[] memory returndata)\n    {\n        uint256 callCount = data.length;\n        successes = new bool[](callCount);\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\n                data[ind]\n            );\n            unchecked {\n                ind++;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/PrepaymentDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@api3/airnode-protocol-v1/contracts/utils/PrepaymentDepository.sol\";"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}